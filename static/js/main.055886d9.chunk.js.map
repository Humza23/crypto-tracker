{"version":3,"sources":["components/Chart.js","components/Charts.js","components/Navbar.js","hooks/useLocalStorage.js","hooks/useDarkMode.js","index.js"],"names":["Chart","sparklineData","formattedData","map","price","idx","timeToSubtract","value","date","moment","subtract","format","length","filter","data","width","height","type","dataKey","stroke","strokeDasharray","interval","Charts","coinData","className","coin","key","name","symbol","src","image","alt","sparkline_in_7d","Navbar","props","onClick","e","preventDefault","setDarkMode","darkMode","useLocalStorage","initialValue","useState","localStorage","getItem","JSON","parse","storedValue","setStoredValue","setItem","stringify","useDarkMode","App","setCoinData","useEffect","axios","get","then","res","catch","err","console","log","rootElement","document","getElementById","ReactDOM","render"],"mappings":"wQAuCeA,EA5BD,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACTC,EAAgBD,EACnBE,KAAI,SAACC,EAAOC,GACX,GAAIA,EAAM,IAAM,EAAG,CACjB,IAAMC,EAAiB,IAAMD,EAI7B,MAAO,CAAEE,MAAOH,EAAOI,KAHVC,MACVC,SAASJ,EAAgB,SACzBK,OAAO,cAEL,OAAIN,IAAQJ,EAAcW,OAAS,EAEjC,CAAEL,MAAOH,EAAOI,KADVC,MAASE,OAAO,cAGxB,QAERE,QAAO,SAAAC,GAAI,OAAIA,KAElB,OACE,kBAAC,IAAD,CAAWC,MAAO,KAAMC,OAAQ,IAAKF,KAAMZ,GACzC,kBAAC,IAAD,CAAMe,KAAK,WAAWC,QAAQ,QAAQC,OAAO,YAC7C,kBAAC,IAAD,CAAeA,OAAO,OAAOC,gBAAgB,QAC7C,kBAAC,IAAD,CAAOF,QAAQ,OAAOG,SAAU,IAChC,kBAAC,IAAD,MACA,kBAAC,IAAD,QCfSC,EAhBA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,yBAAKC,UAAU,UACZD,EAASpB,KAAI,SAAAsB,GAAI,OAChB,yBAAKD,UAAU,mBAAmBE,IAAKD,EAAKE,MAC1C,wBAAIH,UAAU,eAAeC,EAAKE,MAClC,wBAAIH,UAAU,gBAAgBC,EAAKG,QACnC,yBAAKJ,UAAU,cACb,yBAAKK,IAAKJ,EAAKK,MAAOd,OAAO,KAAKe,IAAKN,EAAKE,QAE9C,kBAAC,EAAD,CAAO1B,cAAewB,EAAKO,gBAAgB5B,cCQtC6B,EAnBA,SAACC,GAMd,OACE,yBAAKV,UAAU,UACb,8CACA,yBAAKA,UAAU,qBACb,yBACEW,QAVW,SAAAC,GACjBA,EAAEC,iBACFH,EAAMI,aAAaJ,EAAMK,WASnBf,UAAWU,EAAMK,SAAW,iBAAmB,cCI1CC,EAhBS,SAACd,EAAKe,GAAkB,IAAD,EACLC,oBAAS,WAC3C,OAAIC,aAAaC,QAAQlB,GACdmB,KAAKC,MAAMH,aAAaC,QAAQlB,IAEpCe,KALgC,mBACpCM,EADoC,KACvBC,EADuB,KAa3C,MAAO,CAACD,EALS,SAAAxC,GACbyC,EAAezC,GACfoC,aAAaM,QAAQvB,EAAKmB,KAAKK,UAAU3C,OCHlC4C,EANK,SAACV,GAAkB,IAAD,EACAD,EAAgB,OAAQC,GADxB,mBAGlC,MAAQ,CAH0B,YCQhCW,G,OAAM,WAAO,IAAD,EACgBV,mBAAS,IADzB,mBACTnB,EADS,KACC8B,EADD,OAEgBF,GAAY,GAF5B,mBAETZ,EAFS,KAECD,EAFD,KAYhB,OARAgB,qBAAU,WACRC,IACGC,IACC,0HAEDC,MAAK,SAAAC,GAAG,OAAIL,EAAYK,EAAI5C,SAC5B6C,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC3B,IAED,yBAAKpC,UAAWe,EAAW,gBAAkB,OAC3C,kBAAC,EAAD,CAAQA,SAAUA,EAAUD,YAAaA,IACzC,kBAAC,EAAD,CAAQf,SAAUA,OAKlBwC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAASJ,K","file":"static/js/main.055886d9.chunk.js","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip\n} from \"recharts\";\n\nconst Chart = ({ sparklineData }) => {\n  const formattedData = sparklineData\n    .map((price, idx) => {\n      if (idx % 6 === 0) {\n        const timeToSubtract = 168 - idx;\n        const date = moment()\n          .subtract(timeToSubtract, \"hours\")\n          .format(\"ddd h:mma\");\n        return { value: price, date };\n      } else if (idx === sparklineData.length - 1) {\n        const date = moment().format(\"ddd h:mma\");\n        return { value: price, date };\n      }\n      return null;\n    })\n    .filter(data => data);\n\n  return (\n    <LineChart width={1100} height={300} data={formattedData}>\n      <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" />\n      <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n      <XAxis dataKey=\"date\" interval={3} />\n      <YAxis />\n      <Tooltip />\n    </LineChart>\n  );\n};\n\nexport default Chart;\n","import React from \"react\";\nimport Chart from \"./Chart\";\n\nconst Charts = ({ coinData }) => {\n  return (\n    <div className=\"charts\">\n      {coinData.map(coin => (\n        <div className=\"chart__container\" key={coin.name}>\n          <h2 className=\"coin__title\">{coin.name}</h2>\n          <h4 className=\"coin__symbol\">{coin.symbol}</h4>\n          <div className=\"coin__logo\">\n            <img src={coin.image} height=\"40\" alt={coin.name} />\n          </div>\n          <Chart sparklineData={coin.sparkline_in_7d.price} />\n        </div>\n      ))}\n    </div>\n  );\n};\nexport default Charts;\n","import React from 'react';\n\nconst Navbar = (props) => {\n  const toggleMode = e => {\n    e.preventDefault();\n    props.setDarkMode(!props.darkMode);\n  };\n\n  return (\n    <nav className=\"navbar\">\n      <h1>Crypto Tracker</h1>\n      <div className=\"dark-mode__toggle\">\n        <div\n          onClick={toggleMode}\n          className={props.darkMode ? 'toggle toggled' : 'toggle'}\n        />\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import {useState} from 'react'\n\nconst useLocalStorage = (key, initialValue) => {\n    const [storedValue, setStoredValue] = useState(() => {\n        if (localStorage.getItem(key)) {\n            return JSON.parse(localStorage.getItem(key))\n        }\n        return(initialValue)\n    })\n\n    const setValue = value => {\n        setStoredValue(value)\n        localStorage.setItem(key, JSON.stringify(value))\n    }\n\n    return([storedValue, setValue])\n}\n\nexport default useLocalStorage;","\nimport useLocalStorage from './useLocalStorage.js'\n\nconst useDarkMode = (initialValue) => {\n    const [darkValue, setDarkValue] = useLocalStorage('dark', initialValue )\n\n    return ([darkValue,setDarkValue])\n}\n\nexport default useDarkMode;","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\n\nimport Charts from \"./components/Charts\";\nimport Navbar from \"./components/Navbar\";\n\nimport useDarkMode from './hooks/useDarkMode.js'\n\nimport \"./styles.scss\";\n\nconst App = () => {\n  const [coinData, setCoinData] = useState([]);\n  const [darkMode, setDarkMode] = useDarkMode(false);\n\n  useEffect(() => {\n    axios\n      .get(\n        \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=true\"\n      )\n      .then(res => setCoinData(res.data))\n      .catch(err => console.log(err));\n  }, []);\n  return (\n    <div className={darkMode ? \"dark-mode App\" : \"App\"}>\n      <Navbar darkMode={darkMode} setDarkMode={setDarkMode} />\n      <Charts coinData={coinData} />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}