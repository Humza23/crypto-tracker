{"version":3,"sources":["images/bitcoinImg.png","components/Chart.js","components/Charts.js","components/Navbar.js","components/ErrorComponent.js","components/LoadingPage.js","hooks/useLocalStorage.js","hooks/useDarkMode.js","components/App.js","index.js"],"names":["module","exports","Chart","sparklineData","formattedData","map","price","idx","timeToSubtract","value","date","moment","subtract","format","length","filter","data","width","height","type","dataKey","stroke","strokeDasharray","interval","Charts","coinData","className","coin","key","name","symbol","src","image","alt","sparkline_in_7d","Navbar","props","onClick","e","preventDefault","setDarkMode","darkMode","ErrorComponent","errorMessage","LoadingPage","coinImage","useLocalStorage","initialValue","useState","localStorage","getItem","JSON","parse","storedValue","setStoredValue","setItem","stringify","useDarkMode","App","setCoinData","error","setError","loading","setLoading","useEffect","loadingTimeout","setTimeout","console","log","axios","get","then","res","catch","err","clearTimeout","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.6e4ea59b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bitcoinImg.5dc6e79c.png\";","import React from \"react\";\nimport moment from \"moment\";\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer\n} from \"recharts\";\n\nconst Chart = ({ sparklineData }) => {\n  const formattedData = sparklineData\n    .map((price, idx) => {\n      if (idx % 6 === 0) {\n        const timeToSubtract = 168 - idx;\n        const date = moment()\n          .subtract(timeToSubtract, \"hours\")\n          .format(\"ddd h:mma\");\n        return { value: price, date };\n      } else if (idx === sparklineData.length - 1) {\n        const date = moment().format(\"ddd h:mma\");\n        return { value: price, date };\n      }\n      return null;\n    })\n    .filter((data) => data);\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <LineChart data={formattedData}>\n        <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" />\n        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n        <XAxis dataKey=\"date\" interval={3} />\n        <YAxis />\n        <Tooltip />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default Chart;\n","import React from \"react\";\nimport Chart from \"./Chart\";\n\nconst Charts = ({ coinData }) => {\n  return (\n    <div className=\"charts\">\n      {coinData.map((coin) => (\n        <div className=\"chart__container\" key={coin.name}>\n          <h2 className=\"coin__title\">{coin.name}</h2>\n          <h4 className=\"coin__symbol\">{coin.symbol}</h4>\n          <div className=\"coin__logo\">\n            <img src={coin.image} height=\"40\" alt={coin.name} />\n          </div>\n          <Chart sparklineData={coin.sparkline_in_7d.price} />\n        </div>\n      ))}\n    </div>\n  );\n};\nexport default Charts;\n","import React from \"react\";\n\nconst Navbar = (props) => {\n  const toggleMode = (e) => {\n    e.preventDefault();\n    props.setDarkMode(!props.darkMode);\n  };\n\n  return (\n    <nav className=\"navbar\">\n      <h1>Crypto Tracker</h1>\n      <div className=\"dark-mode__toggle\">\n        <div\n          onClick={toggleMode}\n          className={props.darkMode ? \"toggle toggled\" : \"toggle\"}\n        />\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nconst ErrorComponent = ({ errorMessage }) => {\n  return (\n    <div className=\"error-container\">\n      <p className=\"error-message\">{errorMessage}</p>\n    </div>\n  );\n};\n\nexport default ErrorComponent;\n","import React from \"react\";\n\nimport \"../loadingPage.css\";\nimport coinImage from \"../images/bitcoinImg.png\";\n\nconst LoadingPage = () => {\n  return (\n    <div className=\"loading-container\">\n      <img className=\"coin-image\" src={coinImage} alt=\"Rolling Coin\" />\n    </div>\n  );\n};\nexport default LoadingPage;\n","import { useState } from \"react\";\n\nconst useLocalStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    if (localStorage.getItem(key)) {\n      return JSON.parse(localStorage.getItem(key));\n    }\n    return initialValue;\n  });\n\n  const setValue = (value) => {\n    setStoredValue(value);\n    localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  return [storedValue, setValue];\n};\n\nexport default useLocalStorage;\n","import useLocalStorage from \"./useLocalStorage.js\";\n\nconst useDarkMode = (initialValue) => {\n  const [darkValue, setDarkValue] = useLocalStorage(\"dark\", initialValue);\n\n  return [darkValue, setDarkValue];\n};\n\nexport default useDarkMode;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport Charts from \"./Charts\";\nimport Navbar from \"./Navbar\";\nimport ErrorComponent from \"./ErrorComponent.js\";\nimport LoadingPage from \"./LoadingPage.js\";\n\nimport useDarkMode from \"../hooks/useDarkMode.js\";\n\nimport \"../styles.scss\";\n\nconst App = () => {\n  const [coinData, setCoinData] = useState([]);\n  const [darkMode, setDarkMode] = useDarkMode(false);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const loadingTimeout = setTimeout(() => {\n      console.log(\"Setting loading to false\");\n      axios\n        .get(\n          \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=true\",\n        )\n        .then((res) => {\n          setCoinData(res.data);\n          setLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setError(\"Error fetching data, please try again later\");\n          setLoading(false);\n        });\n    }, 2550);\n    return () => clearTimeout(loadingTimeout);\n  }, []);\n\n  return (\n    <div className={darkMode ? \"dark-mode App\" : \"App\"}>\n      {loading ? (\n        <LoadingPage />\n      ) : error ? (\n        <ErrorComponent errorMessage={error} />\n      ) : (\n        <>\n          <Navbar darkMode={darkMode} setDarkMode={setDarkMode} />\n          <Charts coinData={coinData} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}